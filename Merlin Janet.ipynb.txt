{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import tkinter as tk\n",
        "from tkinter import messagebox\n",
        "import os\n",
        "import time\n",
        "import cv2\n",
        "import csv\n",
        "import glob\n",
        "import joblib\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from PIL import ImageGrab\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn import metrics\n",
        "import warnings\n",
        "\n",
        "# Suppress warnings\n",
        "warnings.filterwarnings(\"ignore\", category=UserWarning)\n",
        "\n",
        "window = tk.Tk()\n",
        "window.title(\"Handwritten Digit Recognition\")\n",
        "\n",
        "# Label and Entry\n",
        "l1 = tk.Label(window, text=\"Digit\", font=('Algerian', 20))\n",
        "l1.place(x=5, y=0)\n",
        "\n",
        "t1 = tk.Entry(window, width=20, border=5)\n",
        "t1.place(x=150, y=0)\n",
        "\n",
        "# Function to capture screen images after launching Paint\n",
        "def screen_capture():\n",
        "    os.system(\"start mspaint\")\n",
        "    time.sleep(30)  # Give time to draw\n",
        "\n",
        "    folder = \"digits\"\n",
        "    os.makedirs(folder, exist_ok=True)\n",
        "\n",
        "    for i in range(10):\n",
        "        time.sleep(18)\n",
        "        im = ImageGrab.grab(bbox=(60, 170, 400, 550))  # Adjust as needed\n",
        "        im.save(os.path.join(folder, f\"{i}.png\"))\n",
        "        print(\"Saved...\", i)\n",
        "\n",
        "    messagebox.showinfo(\"Result\", \"Capturing screen is completed!!\")\n",
        "\n",
        "# Button to open Paint and capture screen\n",
        "b1 = tk.Button(window, text=\"1. Open paint and capture the screen\", font=('Algerian', 15), bg=\"orange\", fg=\"black\", command=screen_capture)\n",
        "b1.place(x=5, y=50)\n",
        "\n",
        "# Function to generate dataset\n",
        "\n",
        "def generate_dataset():\n",
        "    header = [\"label\"] + [f\"pixel{i}\" for i in range(784)]\n",
        "\n",
        "    with open('dataset.csv', 'w', newline='') as f:\n",
        "        writer = csv.writer(f)\n",
        "        writer.writerow(header)\n",
        "\n",
        "        for label in range(10):\n",
        "            img_path = os.path.join(\"digits\", f\"{label}.png\")\n",
        "            if not os.path.exists(img_path):\n",
        "                continue\n",
        "\n",
        "            im = cv2.imread(img_path)\n",
        "            im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n",
        "            im_gray = cv2.GaussianBlur(im_gray, (15, 15), 0)\n",
        "            roi = cv2.resize(im_gray, (28, 28), interpolation=cv2.INTER_AREA)\n",
        "\n",
        "            data = [label]\n",
        "            for i in range(28):\n",
        "                for j in range(28):\n",
        "                    k = roi[i, j]\n",
        "                    k = 1 if k > 100 else 0\n",
        "                    data.append(k)\n",
        "            writer.writerow(data)\n",
        "\n",
        "    messagebox.showinfo(\"Result\", \"Generating dataset is completed!!\")\n",
        "\n",
        "# Button to generate dataset\n",
        "b2 = tk.Button(window, text=\"2. Generate dataset\", font=('Algerian', 15), bg=\"pink\", fg=\"blue\", command=generate_dataset)\n",
        "b2.place(x=10, y=100)\n",
        "\n",
        "# Train the model and save\n",
        "\n",
        "def train_save_accuracy():\n",
        "    data = pd.read_csv(\"dataset.csv\")\n",
        "    data = data.apply(pd.to_numeric, errors='coerce').dropna()\n",
        "\n",
        "    X = data.drop(\"label\", axis=1).astype(\"float32\")\n",
        "    y = data[\"label\"].astype(int)\n",
        "\n",
        "    train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=6)\n",
        "\n",
        "    classifier = SVC(kernel=\"linear\", random_state=6)\n",
        "    classifier.fit(train_X, train_y)\n",
        "\n",
        "    os.makedirs(\"model\", exist_ok=True)\n",
        "    model_path=\"model/model.pk1\"\n",
        "    joblib.dump(classifier,model_path)\n",
        "\n",
        "    prediction = classifier.predict(test_X)\n",
        "    acc = metrics.accuracy_score(test_y, prediction)\n",
        "    messagebox.showinfo(\"Accuracy\", f\"Model trained with accuracy: {acc:.2f}\")\n",
        "\n",
        "# Button to train the model\n",
        "b3 = tk.Button(window, text=\"3. Train the model, save it and calculate accuracy\", font=('Algerian', 15), bg=\"green\", fg=\"white\", command=train_save_accuracy)\n",
        "b3.place(x=5, y=150)\n",
        "\n",
        "# Function for live prediction\n",
        "\n",
        "def prediction():\n",
        "    model_path=\"model/model.pk1\"\n",
        "    if not os.path.exists(model_path):\n",
        "        messagebox.showerror(\"Error\", \"Trained model not found. Please train the model first.\")\n",
        "        return\n",
        "\n",
        "    model = joblib.load(model_path)\n",
        "    os.makedirs(\"img\", exist_ok=True)\n",
        "    os.system(\"start mspaint\")\n",
        "    time.sleep(15)\n",
        "\n",
        "    try:\n",
        "        img = ImageGrab.grab(bbox=(60, 170, 400, 550))\n",
        "        img_path = os.path.join(\"img\", \"img.png\")\n",
        "        img.save(img_path)\n",
        "\n",
        "        im = cv2.imread(img_path)\n",
        "        im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n",
        "        im_gray = cv2.GaussianBlur(im_gray, (5, 5), 0)\n",
        "        _, im_th = cv2.threshold(im_gray, 100, 255, cv2.THRESH_BINARY)\n",
        "        roi = cv2.resize(im_th, (28, 28), interpolation=cv2.INTER_AREA)\n",
        "        roi = roi.reshape(1, -1).astype(\"float32\")\n",
        "\n",
        "        result = model.predict(roi)\n",
        "        messagebox.showinfo(\"Prediction\", f\"Predicted digit: {result[0]}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        messagebox.showerror(\"Error\", str(e))\n",
        "\n",
        "# Button for live prediction\n",
        "b4 = tk.Button(window, text=\"4. Live prediction\", font=('Algerian', 15), bg=\"white\", fg=\"red\", command=prediction)\n",
        "b4.place(x=5, y=200)\n",
        "\n",
        "window.geometry(\"600x300\")\n",
        "window.mainloop()"
      ],
      "metadata": {
        "id": "n6UXB-PEHChM"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}